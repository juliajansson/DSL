data E = Add E E
       | Mul E E
       | Con Integer
       deriving Eq

class IntExp t where
  add:: t -> t -> t
  mul:: t -> t -> t
  con:: Integer -> t

foldE:: (s -> s -> s) -> (s -> s -> s) -> (Integer -> s) -> (E -> s)
foldE add mul con = r
  where r (Add x y) = add (r x) (r y)
        r (Mul x y) = mul (r x) (r y)
        r (con i)   = con i

foldIE:: IntExp t => E -> t
foldIE = foldE add mul con

seven:: Intexp a => a
seven = add (con 3) (con 4)
